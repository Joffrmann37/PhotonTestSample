// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name CleanArchitecture
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CleanArchitecture
import Combine
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol UseCase {
  func fetch<T>(url: Foundation.URL, type: [T].Type) -> Combine.Future<[T], CleanArchitecture.CleanError> where T : AnyObject, T : Swift.Decodable
}
public enum CleanError : Swift.Int, Swift.Error {
  case badRequest
  case forbidden
  case notFound
  case serverError
  case notAcceptable
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Repository {
  func fetch<T>(url: Foundation.URL, forType type: [T].Type) -> Combine.Future<[T], CleanArchitecture.CleanError> where T : Swift.Decodable
}
extension CleanArchitecture.CleanError : Swift.Equatable {}
extension CleanArchitecture.CleanError : Swift.Hashable {}
extension CleanArchitecture.CleanError : Swift.RawRepresentable {}
